service: user-service
frameworkVersion: '3'

useDotenv: true

provider:
  name: aws
  runtime: nodejs18.x
  versionFunctions: false
  stage: 'dev'
  region: 'eu-west-1'
  httpApi:
    cors: true
  # SNS Topic
  environment:
    SNS_TOPIC: { Ref: CustomerTopic }
    NOTIFY_TOPIC: 
      "Fn:ImportValue": "notifySvcArn"
    STRIPE_SECRET_KEY: ${env:STRIPE_SECRET_KEY},
    STRIPE_PUBLIC_KEY: ${env:STRIPE_PUBLIC_KEY}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "sns:Publish"
      Resource:
        - !Ref CustomerTopic
        - "Fn:ImportValue": "notifySvcArn"

custom:
  stage: "dev"
  serverless-offline:
    httpPort: 4000
    lambdaPort: 4002

functions:
  signup:
    handler: app/handler.Signup
    events:
      - httpApi:
          path: /signup
          method: post
  login:
    handler: app/handler.Login
    events:
      - httpApi:
          path: /login
          method: post
  verify:
    handler: app/handler.Verify
    events:
      - httpApi:
          path: /verify
          method: post
  get-verification-code:
    handler: app/handler.GetVerificationCode
    events:
      - httpApi:
          path: /verify
          method: get
  create-profile:
    handler: app/handler.CreateProfile
    events:
      - httpApi:
          path: /profile
          method: post
  get-profile:
    handler: app/handler.GetProfile
    events:
      - httpApi:
          path: /profile
          method: get
  edit-profile:
    handler: app/handler.EditProfile
    events:
      - httpApi:
          path: /profile
          method: put
  create-cart:
    handler: app/handler.CreateCart
    timeout: 15
    events:
      - httpApi:
          path: /cart
          method: post
  get-cart:
    handler: app/handler.GetCart
    timeout: 15
    events:
      - httpApi:
          path: /cart
          method: get
  edit-cart:
    handler: app/handler.EditCart
    timeout: 15
    events:
      - httpApi:
          path: /cart
          method: put
  delete-cart:
    handler: app/handler.DeleteCart
    timeout: 15
    events:
      - httpApi:
          path: /cart
          method: delete
  create-payment:
    handler: app/handler.CreatPayment
    events:
      - httpApi:
          path: /payment
          method: post
  get-payment:
    handler: app/handler.GetPayment
    events:
      - httpApi:
          path: /payment
          method: get
  edit-payment:
    handler: app/handler.EditPayment
    events:
      - httpApi:
          path: /payment
          method: put
  collect-payment:
    handler: app/handler.CollectPayment
    events:
      - httpApi:
          path: /collect-payment
          method: post
  place-order:
    handler: app/handler.PlaceOrder
    events:
      - httpApi:
          path: /place-order
          method: post

  joinSellerProgram:
    handler: app/handler.JoinSellerProgram
    events:
      - httpApi:
          path: /join
          method: post
  getPaymentMethods:
    handler: app/handler.GetPaymentMethods
    events:
      - httpApi:
          path: /payment-methods
          method: get
  editPaymentMethod:
    handler: app/handler.EditPaymentMethod
    events:
      - httpApi:
          path: /payment-methods/{id}
          method: put

plugins:
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-plugin-typescript
  - serverless-plugin-optimize
  - serverless-plugin-common-excludes
  - serverless-plugin-include-dependencies

package:
  individually: true

resources:
  Resources:
    CustomerTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: "customer sns topic description"
        TopicName: CustomerTopic

  # Used as export methode so other service/aws etc can use it
  Outputs:
    CustomerTopicInfo:
      Description: customer-topic
      Value: !Ref CustomerTopic
      Export:
        Name: customer-topic